"use client";
import React, { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import styles from "./assignmentroom.module.css";
import { IoChevronBack } from "react-icons/io5";
import AssignmentList from "./_assignment/AssignmentList";
import AssignmentDetail from "./_assignment/AssignmentDetail";
import SubmissionModal from "./_assignment/SubmissionModal";
import ViewSubmissionModal from "./_assignment/ViewSubmissionModal";

// Î∞© Î©§Î≤Ñ ÌÉÄÏûÖ (ActionBarÏóêÏÑú Í∞ÄÏ†∏Ïò® Í≤ÉÍ≥º ÎèôÏùº)
interface RoomMember {
  memberId: number;
  lastReadMessageId: number;
  name: string;
  avatarKey: string;
  avatarVersion: number;
  avatarUrl?: string; // avatarUrl ÌïÑÎìú Ï∂îÍ∞Ä
  roomRole: "LEADER" | string;
}

// AssignmentDetailÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Member ÌÉÄÏûÖ
interface Member {
  id: string;
  name: string;
  avatar: string;
}

interface ModalProps {
  setModal: () => void;
  roomId: number;
  members: RoomMember[];
}

// Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏÇ¨Ïö©Ìï† ÌÉÄÏûÖ
interface Assignment {
  id: string;
  title: string;
  description: string;
  creator: string;
  assignedMembers: string[];
  dueDate: string;
  status: "ÏßÑÌñâÏ§ë" | "ÏôÑÎ£å" | "ÎßàÍ∞ê" | "Ï∑®ÏÜå";
  createdAt: string;
  isCancelled?: boolean;
  submissions: {
    memberId: string;
    memberName: string;
    submittedAt?: string;
    status: "ÎåÄÍ∏∞" | "Ï†úÏ∂úÏôÑÎ£å";
    submissionData?: {
      text: string;
      files: {
        name: string;
        size: number;
        url?: string;
      }[];
    };
  }[];
}

// Í∏∞Î≥∏ ÏïÑÎ∞îÌÉÄ ÏÉùÏÑ± Ìï®Ïàò
const generateAvatar = (name: string): string => {
  const avatars = ["üê±", "üê∂", "üê∞", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üê∏", "üêµ"];
  const index = name.length % avatars.length;
  return avatars[index];
};

const AssignmentRoom = ({ setModal, roomId, members }: ModalProps) => {
  const { data: session } = useSession();

  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | null>(null);
  const [showSubmissionModal, setShowSubmissionModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [viewingSubmission, setViewingSubmission] = useState<Assignment["submissions"][0] | null>(null);
  const [submissionText, setSubmissionText] = useState("");
  const [submissionFiles, setSubmissionFiles] = useState<File[]>([]);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [, setIsLoading] = useState(false);

  // ActionBarÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ avatarUrl Ïö∞ÏÑ† ÏÇ¨Ïö©
  const convertedMembers: Member[] = Array.isArray(members)
    ? members.map((member: RoomMember) => {
        // avatarUrlÏù¥ ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Ïù¥Î™®ÏßÄ
        const avatar = member.avatarUrl || generateAvatar(member.name || "Unknown");

        console.log("AssignmentRoom - Î©§Î≤Ñ Î≥ÄÌôò:", {
          memberId: member.memberId,
          name: member.name,
          avatarUrl: member.avatarUrl,
          finalAvatar: avatar,
        });

        return {
          id: member.memberId.toString(),
          name: member.name || "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê",
          avatar: avatar,
        };
      })
    : [];

  console.log("AssignmentRoom - ÏõêÎ≥∏ members:", members);
  console.log("AssignmentRoom - convertedMembers:", convertedMembers);

  const preventOffModal = (event: React.MouseEvent) => {
    event.stopPropagation();
  };

  const handleSubmitAssignment = async (data: { text: string; files: File[] }) => {
    console.log("handleSubmitAssignment Ìò∏Ï∂úÎê® (SubmissionModalÏù¥ ÏßÅÏ†ë Ï≤òÎ¶¨)");
  };

  const canSubmit = (assignment: Assignment) => {
    const currentUserName = session?.user?.name;
    const currentUserEmail = session?.user?.email;

    console.log("canSubmit Í≤ÄÏÇ¨:");
    console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ:", currentUserName);
    console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº:", currentUserEmail);
    console.log("- Î∞© Î©§Î≤ÑÎì§:", members);

    let currentUserId = null;
    const currentMember = members.find(
      (member) => member.name === currentUserName || member.memberId.toString() === session?.user?.id?.toString()
    );

    if (currentMember) {
      currentUserId = currentMember.memberId.toString();
      console.log("- Ï∞æÏùÄ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID:", currentUserId);
    } else {
      console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÎ•º Î∞© Î©§Î≤ÑÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏùå");
    }

    console.log("- assignment.submissions:", assignment.submissions);
    console.log("- assignment.assignedMembers:", assignment.assignedMembers);

    if (!currentUserId) {
      console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå");
      return false;
    }

    const isAssigned = assignment.assignedMembers.includes(currentUserId);
    console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Í≥ºÏ†úÏóê Ìï†ÎãπÎê®:", isAssigned);

    if (!isAssigned) {
      console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥ Í≥ºÏ†úÏóê Ìï†ÎãπÎêòÏßÄ ÏïäÏùå");
      return false;
    }

    const mySubmission = assignment.submissions.find((s) => s.memberId === currentUserId);
    console.log("- ÎÇ¥ Ï†úÏ∂ú Ï†ïÎ≥¥:", mySubmission);

    const canSubmitResult = mySubmission?.status === "ÎåÄÍ∏∞";
    console.log("- Ï†úÏ∂ú Í∞ÄÎä• Ïó¨Î∂Ä:", canSubmitResult);

    return canSubmitResult;
  };

  const handleViewSubmission = (submission: Assignment["submissions"][0]) => {
    if (submission.status === "Ï†úÏ∂úÏôÑÎ£å" && submission.submissionData) {
      setViewingSubmission(submission);
      setShowViewModal(true);
    }
  };

  const handleAssignmentSelect = (assignment: Assignment | null) => {
    setSelectedAssignment(assignment);
  };

  const handleSubmitClick = () => {
    setShowSubmissionModal(true);
  };

  const handleAssignmentUpdate = (updatedAssignment: Assignment) => {
    console.log("handleAssignmentUpdate Ìò∏Ï∂úÎê®:", updatedAssignment);

    if (selectedAssignment?.id === updatedAssignment.id) {
      setSelectedAssignment(updatedAssignment);
    }

    setRefreshTrigger((prev) => prev + 1);
  };

  useEffect(() => {
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = "auto";
    };
  }, []);

  return (
    <div onClick={setModal} className={styles.modalBackground}>
      <div onClick={preventOffModal} className={styles.modal}>
        <div className={styles.modalHeader}>
          <button onClick={setModal} className={styles.backButton}>
            <IoChevronBack size={24} />
          </button>
          <h2 className={styles.modalTitle}>Í≥ºÏ†ú ÌôïÏù∏ÌïòÍ∏∞</h2>
        </div>

        <div className={styles.modalBody}>
          <AssignmentList
            roomId={roomId}
            selectedAssignment={selectedAssignment}
            onAssignmentSelect={handleAssignmentSelect}
            members={convertedMembers}
            refreshTrigger={refreshTrigger}
          />

          <AssignmentDetail
            assignment={selectedAssignment}
            members={convertedMembers}
            onSubmitClick={handleSubmitClick}
            onViewSubmission={handleViewSubmission}
            canSubmit={canSubmit}
            roomId={roomId}
            onAssignmentUpdate={handleAssignmentUpdate}
          />
        </div>

        {selectedAssignment && (
          <SubmissionModal
            assignment={selectedAssignment}
            isOpen={showSubmissionModal}
            onClose={() => setShowSubmissionModal(false)}
            onSubmit={handleSubmitAssignment}
            submissionText={submissionText}
            setSubmissionText={setSubmissionText}
            submissionFiles={submissionFiles}
            setSubmissionFiles={setSubmissionFiles}
            roomId={roomId}
            onSuccess={() => {
              setRefreshTrigger((prev) => prev + 1);
            }}
          />
        )}

        <ViewSubmissionModal
          submission={viewingSubmission}
          isOpen={showViewModal}
          onClose={() => setShowViewModal(false)}
        />
      </div>
    </div>
  );
};

export default AssignmentRoom;
