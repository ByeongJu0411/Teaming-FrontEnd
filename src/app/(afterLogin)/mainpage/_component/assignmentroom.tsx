"use client";
import React, { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import styles from "./assignmentroom.module.css";
import { IoChevronBack } from "react-icons/io5";
import AssignmentList from "./_assignment/AssignmentList";
import AssignmentDetail from "./_assignment/AssignmentDetail";
import SubmissionModal from "./_assignment/SubmissionModal";
import ViewSubmissionModal from "./_assignment/ViewSubmissionModal";

// Î∞© Î©§Î≤Ñ ÌÉÄÏûÖ (ActionBarÏóêÏÑú Í∞ÄÏ†∏Ïò® Í≤ÉÍ≥º ÎèôÏùº)
interface RoomMember {
  memberId: number;
  lastReadMessageId: number;
  name: string;
  avatarKey: string;
  avatarVersion: number;
  roomRole: "LEADER" | string;
}

// AssignmentDetailÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Member ÌÉÄÏûÖ
interface Member {
  id: string;
  name: string;
  avatar: string;
}

interface ModalProps {
  setModal: () => void;
  roomId: string;
  members: RoomMember[]; // optionalÏùÑ Ï†úÍ±∞ÌïòÍ≥† ÌïÑÏàòÎ°ú Î≥ÄÍ≤Ω
}

// Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏÇ¨Ïö©Ìï† ÌÉÄÏûÖ
interface Assignment {
  id: string;
  title: string;
  description: string;
  creator: string;
  assignedMembers: string[];
  dueDate: string;
  status: "ÏßÑÌñâÏ§ë" | "ÏôÑÎ£å" | "ÎßàÍ∞ê";
  createdAt: string;
  submissions: {
    memberId: string;
    memberName: string;
    submittedAt?: string;
    status: "ÎåÄÍ∏∞" | "Ï†úÏ∂úÏôÑÎ£å";
    submissionData?: {
      text: string;
      files: {
        name: string;
        size: number;
        url?: string;
      }[];
    };
  }[];
}

// Í∏∞Î≥∏ ÏïÑÎ∞îÌÉÄ ÏÉùÏÑ± Ìï®Ïàò
const generateAvatar = (name: string): string => {
  const avatars = ["üê±", "üê∂", "üê∞", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üê∏", "üêµ"];
  const index = name.length % avatars.length;
  return avatars[index];
};

const AssignmentRoom = ({ setModal, roomId, members }: ModalProps) => {
  const { data: session } = useSession();

  const [selectedAssignment, setSelectedAssignment] = useState<Assignment | null>(null);
  const [showSubmissionModal, setShowSubmissionModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [viewingSubmission, setViewingSubmission] = useState<Assignment["submissions"][0] | null>(null);
  const [submissionText, setSubmissionText] = useState("");
  const [submissionFiles, setSubmissionFiles] = useState<File[]>([]);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [isLoading, setIsLoading] = useState(false); // Î°úÎî© ÏÉÅÌÉú Ï∂îÍ∞Ä

  // Ïã§Ï†ú Î∞© Î©§Î≤ÑÎ•º AssignmentDetailÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const convertedMembers: Member[] = Array.isArray(members)
    ? members.map((member: RoomMember) => ({
        id: member.memberId.toString(),
        name: member.name || "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê",
        avatar: member.avatarKey
          ? `${process.env.NEXT_PUBLIC_BACKEND_URL}/files/${member.avatarKey}?v=${member.avatarVersion}`
          : generateAvatar(member.name || "Unknown"),
      }))
    : [];

  // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
  console.log("AssignmentRoom - members:", members);
  console.log("AssignmentRoom - convertedMembers:", convertedMembers);

  const preventOffModal = (event: React.MouseEvent) => {
    event.stopPropagation();
  };

  // Í≥ºÏ†ú Ï†úÏ∂ú Ï≤òÎ¶¨
  const handleSubmitAssignment = async (data: { text: string; files: File[] }) => {
    if (!selectedAssignment || !session?.accessToken) return;

    try {
      setIsLoading(true); // Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï

      // API Ïä§ÌéôÏóê ÎßûÎäî FormData ÎòêÎäî JSON Íµ¨ÏÑ±
      const formData = new FormData();

      // assignmentIdÏôÄ descriptionÏùÑ FormDataÏóê Ï∂îÍ∞Ä
      formData.append("assignmentId", selectedAssignment.id);
      formData.append("description", data.text);

      // ÌååÏùºÎì§ÏùÑ FormDataÏóê Ï∂îÍ∞Ä
      data.files.forEach((file, index) => {
        formData.append(`files`, file); // ÎòêÎäî files[${index}] ÌòïÏãù
      });

      console.log("Í≥ºÏ†ú Ï†úÏ∂ú ÏöîÏ≤≠:");
      console.log("- assignmentId:", selectedAssignment.id);
      console.log("- description:", data.text);
      console.log("- files:", data.files);

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL || "http://13.125.193.243:8080"}/rooms/${roomId}/assignment/submit`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${session.accessToken}`,
            // multipart/form-dataÏùò Í≤ΩÏö∞ Content-TypeÏùÑ Î™ÖÏãúÌïòÏßÄ ÏïäÏùå (Î∏åÎùºÏö∞Ï†ÄÍ∞Ä ÏûêÎèô ÏÑ§Ï†ï)
          },
          body: formData,
        }
      );

      console.log("Í≥ºÏ†ú Ï†úÏ∂ú API ÏùëÎãµ ÏÉÅÌÉú:", response.status);

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error("Ïù∏Ï¶ùÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
        } else if (response.status === 403) {
          throw new Error("Í≥ºÏ†ú Ï†úÏ∂ú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.");
        } else if (response.status === 404) {
          throw new Error("Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≥ºÏ†úÏûÖÎãàÎã§.");
        } else {
          const errorText = await response.text();
          console.error("Í≥ºÏ†ú Ï†úÏ∂ú API Ïò§Î•ò:", errorText);
          throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. (${response.status}): ${errorText}`);
        }
      }

      // ÏùëÎãµ Ï≤òÎ¶¨ (JSONÏù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå ÌååÏã±)
      let result = null;
      const contentType = response.headers.get("content-type");

      if (contentType && contentType.includes("application/json")) {
        const responseText = await response.text();
        if (responseText) {
          try {
            result = JSON.parse(responseText);
          } catch (parseError) {
            console.warn("JSON ÌååÏã± Ïã§Ìå®, ÌïòÏßÄÎßå Ï†úÏ∂úÏùÄ ÏÑ±Í≥µ:", responseText);
          }
        }
      }

      console.log("Í≥ºÏ†ú Ï†úÏ∂ú ÏÑ±Í≥µ:", result || "ÏùëÎãµ Î≥∏Î¨∏ ÏóÜÏùå");

      // ÏÑ±Í≥µ Ï≤òÎ¶¨
      setShowSubmissionModal(false);
      setSubmissionText("");
      setSubmissionFiles([]);
      alert("Í≥ºÏ†úÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§!");

      // Í≥ºÏ†ú Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      setRefreshTrigger((prev) => prev + 1);
    } catch (error) {
      console.error("Í≥ºÏ†ú Ï†úÏ∂ú Ïã§Ìå®:", error);
      alert(`Í≥ºÏ†ú Ï†úÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§:\n${error instanceof Error ? error.message : "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."}`);
    } finally {
      setIsLoading(false); // Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú
    }
  };

  const canSubmit = (assignment: Assignment) => {
    // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Ïã§Ï†ú Î©§Î≤Ñ ID Ï∞æÍ∏∞
    const currentUserName = session?.user?.name;
    const currentUserEmail = session?.user?.email;

    console.log("canSubmit Í≤ÄÏÇ¨:");
    console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ:", currentUserName);
    console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº:", currentUserEmail);
    console.log("- Î∞© Î©§Î≤ÑÎì§:", members);

    // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÎ•º Î∞© Î©§Î≤Ñ Î™©Î°ùÏóêÏÑú Ï∞æÍ∏∞
    let currentUserId = null;
    const currentMember = members.find(
      (member) => member.name === currentUserName || member.memberId.toString() === session?.user?.id?.toString()
    );

    if (currentMember) {
      currentUserId = currentMember.memberId.toString();
      console.log("- Ï∞æÏùÄ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID:", currentUserId);
    } else {
      console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÎ•º Î∞© Î©§Î≤ÑÏóêÏÑú Ï∞æÏùÑ Ïàò ÏóÜÏùå");
    }

    console.log("- assignment.submissions:", assignment.submissions);
    console.log("- assignment.assignedMembers:", assignment.assignedMembers);

    if (!currentUserId) {
      console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå");
      return false;
    }

    // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥ Í≥ºÏ†úÏóê Ìï†ÎãπÎêòÏóàÎäîÏßÄ ÌôïÏù∏
    const isAssigned = assignment.assignedMembers.includes(currentUserId);
    console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Í≥ºÏ†úÏóê Ìï†ÎãπÎê®:", isAssigned);

    if (!isAssigned) {
      console.log("- ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥ Í≥ºÏ†úÏóê Ìï†ÎãπÎêòÏßÄ ÏïäÏùå");
      return false;
    }

    // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò Ï†úÏ∂ú ÏÉÅÌÉú ÌôïÏù∏
    const mySubmission = assignment.submissions.find((s) => s.memberId === currentUserId);
    console.log("- ÎÇ¥ Ï†úÏ∂ú Ï†ïÎ≥¥:", mySubmission);

    const canSubmitResult = mySubmission?.status === "ÎåÄÍ∏∞";
    console.log("- Ï†úÏ∂ú Í∞ÄÎä• Ïó¨Î∂Ä:", canSubmitResult);

    return canSubmitResult;
  };

  const handleViewSubmission = (submission: Assignment["submissions"][0]) => {
    if (submission.status === "Ï†úÏ∂úÏôÑÎ£å" && submission.submissionData) {
      setViewingSubmission(submission);
      setShowViewModal(true);
    }
  };

  const handleAssignmentSelect = (assignment: Assignment) => {
    setSelectedAssignment(assignment);
  };

  const handleSubmitClick = () => {
    setShowSubmissionModal(true);
  };

  // Í≥ºÏ†ú ÏÉùÏÑ± ÏôÑÎ£å Ïãú ÏÉàÎ°úÍ≥†Ïπ®
  const handleAssignmentCreated = () => {
    setRefreshTrigger((prev) => prev + 1);
  };

  useEffect(() => {
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = "auto";
    };
  }, []);

  return (
    <div onClick={setModal} className={styles.modalBackground}>
      <div onClick={preventOffModal} className={styles.modal}>
        <div className={styles.modalHeader}>
          <button onClick={setModal} className={styles.backButton}>
            <IoChevronBack size={24} />
          </button>
          <h2 className={styles.modalTitle}>Í≥ºÏ†ú ÌôïÏù∏ÌïòÍ∏∞</h2>
        </div>

        <div className={styles.modalBody}>
          <AssignmentList
            roomId={roomId}
            selectedAssignment={selectedAssignment}
            onAssignmentSelect={handleAssignmentSelect}
            members={convertedMembers} // Î≥ÄÌôòÎêú Î©§Î≤Ñ Î∞∞Ïó¥ Ï†ÑÎã¨
            refreshTrigger={refreshTrigger}
          />

          <AssignmentDetail
            assignment={selectedAssignment}
            members={convertedMembers} // Î≥ÄÌôòÎêú Î©§Î≤Ñ Î∞∞Ïó¥ Ï†ÑÎã¨
            onSubmitClick={handleSubmitClick}
            onViewSubmission={handleViewSubmission}
            canSubmit={canSubmit}
          />
        </div>

        {selectedAssignment && (
          <SubmissionModal
            assignment={selectedAssignment}
            isOpen={showSubmissionModal}
            onClose={() => setShowSubmissionModal(false)}
            onSubmit={handleSubmitAssignment} // Í∏∞Ï°¥ Ìï®Ïàò Ïú†ÏßÄ (Ìò∏ÌôòÏÑ±)
            submissionText={submissionText}
            setSubmissionText={setSubmissionText}
            submissionFiles={submissionFiles}
            setSubmissionFiles={setSubmissionFiles}
            roomId={roomId} // roomId Ï†ÑÎã¨
            onSuccess={() => {
              // Ï†úÏ∂ú ÏÑ±Í≥µ Ïãú ÏÉàÎ°úÍ≥†Ïπ®
              setRefreshTrigger((prev) => prev + 1);
            }}
          />
        )}

        <ViewSubmissionModal
          submission={viewingSubmission}
          isOpen={showViewModal}
          onClose={() => setShowViewModal(false)}
        />
      </div>
    </div>
  );
};

export default AssignmentRoom;
